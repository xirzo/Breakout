name: CMake CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CMAKE_VERSION: 3.25.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            ARTIFACT_NAME: linux-build

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl-dev \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libxcursor-dev \
            libxinerama-dev \
            libxext-dev \
            libasound2-dev \
            libbsd-dev

      - name: Check CMake version
        id: check_cmake
        run: |
          if command -v cmake &> /dev/null; then
            INSTALLED_VERSION=$(cmake --version | head -n1 | awk '{print $3}')
            REQUIRED_VERSION="${CMAKE_VERSION}"
            if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$INSTALLED_VERSION" | sort -V | head -n1)" = "$REQUIRED_VERSION" ]; then
              echo "CMAKE_NEEDS_INSTALL=false" >> $GITHUB_OUTPUT
              echo "Using existing CMake version $INSTALLED_VERSION"
            else
              echo "CMAKE_NEEDS_INSTALL=true" >> $GITHUB_OUTPUT
              echo "Existing CMake version $INSTALLED_VERSION is older than required $REQUIRED_VERSION"
            fi
          else
            echo "CMAKE_NEEDS_INSTALL=true" >> $GITHUB_OUTPUT
            echo "CMake not found, will install"
          fi

      - name: Install CMake (Ubuntu)
        if: runner.os == 'Linux' && steps.check_cmake.outputs.CMAKE_NEEDS_INSTALL == 'true'
        run: |
          wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
          tar -xzf cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
          sudo mkdir -p /opt/cmake
          sudo rm -rf /opt/cmake/* || true
          sudo cp -r cmake-${CMAKE_VERSION}-linux-x86_64/* /opt/cmake/
          
          sudo rm -f /usr/local/bin/cmake
          sudo rm -f /usr/local/bin/ctest
          sudo rm -f /usr/local/bin/cpack
          
          sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
          sudo ln -s /opt/cmake/bin/ctest /usr/local/bin/ctest
          sudo ln -s /opt/cmake/bin/cpack /usr/local/bin/cpack
          
          rm -rf cmake-${CMAKE_VERSION}-linux-x86_64
          rm cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz

      - name: Verify CMake installation
        run: cmake --version

      - name: Extract version from CMakeLists.txt
        id: version
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            VERSION=$(powershell -Command "(Select-String -Path CMakeLists.txt -Pattern 'project\(.*VERSION\s+([0-9.]+)' | Select-Object -First 1).Matches.Groups[1].Value")
          else
            VERSION=$(grep -oP 'VERSION\s+\K[0-9.]+' CMakeLists.txt | head -1)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Configure CMake (Debug)
        run: cmake -B build -DCMAKE_BUILD_TYPE=Debug -DFETCH_LIBS=true

      - name: Build (Debug)
        run: cmake --build build --config Debug

      - name: Configure CMake (Release)
        run: cmake -B build-release -DCMAKE_BUILD_TYPE=Release -DFETCH_LIBS=true

      - name: Build (Release)
        run: cmake --build build-release --config Release

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}
          path: build-release/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  
      discussions: write 
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        run: |
          echo "## Release v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- OS: Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: Release" >> $GITHUB_STEP_SUMMARY
